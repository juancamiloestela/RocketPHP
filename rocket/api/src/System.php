<?php
namespace Rocket\Api;

include 'helpers.php';
include 'Resource.php';

class System
{
	public $db;
	public $response;
	public $config = array();
	protected $defaults = array(
		'payload' => 'api/',
		'spec_file' => 'spec/spec.json',
		'core_path' => 'core/',
		'ignored_tables' => array()
	);

	protected $generator;

	protected $routes = array();
	protected $contexts = array();
	protected $checks = array();


	public function __construct($db, $response, $config = array())
	{
		$this->config = array_merge($this->defaults, $config);
		$this->db = $db;
		$this->response = $response;

		$this->checkFolderStructure();
		spl_autoload_register(array($this, 'autoload'));

		if (DEVELOPING){
			include 'Generator.php';
			$this->generator = new Generator($this);
		}

		$this->contexts = include $this->config['core_path'] . 'contexts.php';
		$this->routes = include $this->config['core_path'] . 'routes.php';

		$this->evaluateContexts();
	}

	public function checkFolderStructure()
	{

		$this->config['core_path'] = $this->config['payload'] . $this->config['core_path'];

		// TODO: this should happen to all systems, extend?
		if (!file_exists($this->config['payload'])){
			mkdir($this->config['payload'], 0755, true);
		}

		if (!file_exists($this->config['core_path'])){
			mkdir($this->config['core_path'], 0755, true);
			file_put_contents($this->config['core_path'] . '!DO_NOT_EDIT_FILES_IN_HERE.txt', 'The contents of this folder have been autogenerated by RocketPHP, changes you make to these files will be lost!');
		}
	}

	public function autoload($class)
	{
		$file = str_replace('\\', DIRECTORY_SEPARATOR, $class);

		$filename = $this->config['payload'] . 'overrides' . DIRECTORY_SEPARATOR . $file . '.php';
		if (file_exists($filename)){
			include $filename;
			return;
		}

		if (stripos($file, 'resources') !== false){
			$filename = $this->config['core_path'] . $file . '.php';
			if (file_exists($filename)){
				include $filename;
				return;
			}
		}
	}

	private function evaluateContexts()
	{
		$this->checks = array();

		foreach ($this->contexts as $contextName => $context){
			foreach ($context as $i => $check){
				if (!$check[0]){
					$check = $check[1];
				}

				if (!isset($this->checks[ $check[0].'.'.$check[1] ])){
					if (!is_callable($check)){
						if (is_array($check)){
							throw new \Exception('Context check static method "' . $check[0] . '::' . $check[1] . '()" does not exist');
						}else{
							throw new \Exception('Context check function "' . $check . '()" does not exist');
						}
					}

					$this->checks[ $check[0].'.'.$check[1] ] = \Rocket::call($check);
				}
			}
		}
	}

	public function getCurrentContext()
	{
		foreach ($this->contexts as $contextName => $context){
			foreach ($context as $i => $check){
				if (!$check[0]){
					$check = $check[1];
				}

				if ( !$this->checks[ $check[0].'.'.$check[1] ] ){
					continue 2;
				}
			}
			return $contextName;
		}
		return false;
	}

	public function GET($uri, $data){
		return $this->call($uri, 'GET', $data);
	}

	public function POST($uri, $data){
		return $this->call($uri, 'POST', $data);
	}

	public function PUT($uri, $data){
		return $this->call($uri, 'PUT', $data);
	}

	public function DELETE($uri, $data){
		return $this->call($uri, 'DELETE', $data);
	}

	public function call($uri, $request_method, $data = array(), $internal = true)
	{
		foreach ($this->routes as $route => $controller){
//echo $uri . ' ' . $route . PHP_EOL;
			if (preg_match('/^'.$route.'$/', $uri, $matches)){
				$args = array($data);
				foreach ($controller['args'] as $arg){
					$args[] = isset($matches[$arg]) ? $matches[$arg] : null;
				}

				$context = $this->getCurrentContext();

//include $this->config['core_path'] . 'resources' . DIRECTORY_SEPARATOR . $controller['class'] . '.php';
				$controller['class'] = 'Resources\\'.$controller['class'];
				$instance = new $controller['class']($this->db);
				$method = $request_method . $controller['method'] . '_when_' . $context; // + context & method signature
//echo $method;
				if (method_exists($instance, $method)){
					if ($internal || $instance::methodIsExposed($method)){
						// allow hooks to access current controller
						\Rocket::set('controller', $instance);

						$data = new \stdClass();

						$data->code = 200;
						$data->data = call_user_func_array(array($instance, $method), $args);

						/*try{
							$data->code = 200;
							$data->data = call_user_func_array(array($instance, $method), $args);
						}catch (\NotFoundException $e){
							$data->code = 404;
							$data->errors = "not.found";
						}catch (\InvalidInputDataException $e){
							$data->code = 400;
							$data->errors = $e->errors();
						}catch (\UnauthorizedException $e){
							$data->code = 401;
							$data->errors = $e->data();
						}catch (\PDOException $e){
							$data->code = 500;
							$data->errors = "database.error";
							print_r($e->getMessage());
						}catch (\Exception $e){
							if (true){ // debugging
								// let the error system handle it
								throw $e;
							}else{
								$data->code = 500;
								$data->errors = $e->getMessage();
							}
						}*/

						$metadata = $this->response->getMetadata(); // TODO: get metadata here
						foreach ($metadata as $key => $value){
							$data->$key = $value;
						}

						return $data;
					}
				}
				break;
			}
		}
		throw new \NotFoundException();
	}

	public function launch($uri, $request_method, $data = array())
	{
		try{
			$data = $this->call($uri, $request_method, $data, false);
		}catch (\NotFoundException $e){
			$data->code = 404;
			$data->errors = "not.found";
		}catch (\InvalidInputDataException $e){
			$data->code = 400;
			$data->errors = $e->errors();
		}catch (\UnauthorizedException $e){
			$data->code = 401;
			$data->errors = $e->data();
		}catch (\PDOException $e){
			$data->code = 500;
			$data->errors = "database.error";
			print_r($e->getMessage());
		}catch (\Exception $e){
			if (true){ // debugging
				// let the error system handle it
				throw $e;
			}else{
				$data->code = 500;
				$data->errors = $e->getMessage();
			}
		}

		// -------

		//$data = $this->call($uri, $request_method, $data, false);
		$this->response->status($data->code);
		//$data = array_merge($data, $response->getMetadata());
		$this->response->header('Content-Type', 'application/json');
		$this->response->body(json_encode((array)$data));
		$this->response->send();
	}

}

